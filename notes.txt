1) Installation:

- should come with a sort of README how to install and run, for now I just looked at package.json

2) To run on forked localhost, at block number 36940000 - I use Alchemy, but Infura URL also could work.
`alchemy_api` is an environmental variable here.

$ npm install --save-dev hardhat
$ npx hardhat node --fork https://polygon-mainnet.g.alchemyapi.io/v2/${alchemy_api} --fork-block-number 36940000

Then in another window:
$ export INFURA_URL_MAINNET=http://127.0.0.1:8545
$ npm run arby-search

It will be super slow the first time, but each following execution that uses the same calls to the same contracts will happen much faster, as the previously requested data is cached locally. If you get timeouts the first time you run it, just keep retrying a couple times.


3) The logic of `volumeToReachTargetPrice` is correct, except that:
 - the `feeAmount` was not added to the input amount (minor problem)
 - the sign of the `liquidityNet` was inverted (major problem)


4) I modified the function `verifyVolumeToReachTargetPrice` to also include `deltaTicks` parameter to show how much it should be shifted.



    //In order to calculate the appropraite amount we need to calucate the amount of volume it would take to move the output price to match the input
    //e.g  The the following scenario:
    //   1. You have a superficial arbitrage path ETH => USDC, USDC => BTC, BTC => ETH
    //   2. With the outputs:  1 ETH => 1000 USDC, 1000 USDC => .05 BTC => .05 BTC => 1.1 ETH
    // In order to perform the aribtrage we need to solve for the following problems:
    //   How much input ETH volume would it take for the output ETH volume to converge price?
    //   First we need to load the all ticks we need for the all of the pools, 
    //   so we need to calculate the tick bounds for each pool in reverse
    //   3. The tick bounds for the problems are as following, we grab from the current tick of the pool + tickspacing the direction we're going  
    //   e.g at what tick will the will .05 BTC = 1 ETH
    //       Once you have that tick you will need to calculate the next destination, so you will need to normalize the ratio back to its original form
    //       e.g if .05 BTC outputs 1 ETH, then at that same rate what would output 1.1 ETH for this example lets just say its 
    //               1.1/.05 = 22;
    //               1/22 = .045454
    //       Next we need to caulcate the rate for USDC-BTC previously 1000=>.5, now we need to calculate the ratio as increment to figureout the new ratio of usdc 
    //       e.g  1000 / .05 = 20000
    //       20000 * .045454 = 1300
    //       The usdc bitcoin max ratio should now be 1300 for .5

    //   so then the next problem is how much usdc needs to be put in to output .065 BTC
    //
